# Travis CI (MIT License) configuration file for the imenet WordPress theme.
# @link https://travis-ci.org/

# For use with the imenet WordPress theme.
# @link https://github.com/digitoimistodude/imenet

# Ditch sudo and use containers.
# @link https://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link https://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: required
dist: xenial

# Declare project language.
# @link https://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
# @link https://docs.travis-ci.com/user/build-configuration/
matrix:
    fast_finish: true

    include:
        # Current $required_php_version for WordPress: 5.6.20 (updated to this config on 21.2.2020)
        # aliased to a recent 5.6.x version
        - php: '5.6'
          env: SNIFF=1
        # aliased to a recent 7.0.x version
        - php: '7.0'
        # aliased to a recent 7.2.x version
        - php: '7.2'
          env: SNIFF=1
        # bleeding edge PHP
        - php: 'nightly'

    allow_failures:
        - php: 'nightly'

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
    - sudo rm -rf ~/.nvm - curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
    - sudo apt-get install -y nodejs
    - if [[ `node -v` != v10* ]]; then nvm install stable; fi
    - nvm install-latest-npm

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    # Speed up build time by disabling Xdebug.
    - phpenv config-rm xdebug.ini || echo 'No xdebug config.'
    # Set up temporary paths.
    - if [[ "$SNIFF" == "1" ]]; then export PHPCS_DIR=/tmp/phpcs; fi
    - if [[ "$SNIFF" == "1" ]]; then export WPCS_DIR=/tmp/wpcs; fi
    - if [[ "$SNIFF" == "1" ]]; then export PHPCOMPAT_DIR=/tmp/phpcompatibility; fi
    - if [[ "$SNIFF" == "1" ]]; then export SNIFFS_DIR=/tmp/sniffs; fi
    # Install PHP_CodeSniffer.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR; fi
    # Install WordPress Coding Standards.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b 2.2.1 --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $WPCS_DIR; fi
    # Set install path for WordPress Coding Standards.
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs --config-set installed_paths $WPCS_DIR,$PHPCOMPAT_DIR,$SNIFFS_DIR; fi
    # After CodeSniffer install you should refresh your path.
    - if [[ "$SNIFF" == "1" ]]; then phpenv rehash; fi
    # Install PHP Compatibility sniffs.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/wimg/PHPCompatibility.git $PHPCOMPAT_DIR; fi
    # Pull in the imenet phpcs rules.
    - if [[ "$SNIFF" == "1" ]]; then wget https://raw.githubusercontent.com/digitoimistodude/imenet/master/phpcs.xml; fi
    # Install JSCS: JavaScript Code Style checker.
    # @link http://jscs.info/
    # - if [[ "$SNIFF" == "1" ]]; then npm install -g jscs; fi
    # Pull in the imenet eslint rules.
    - if [[ "$SNIFF" == "1" ]]; then wget https://raw.githubusercontent.com/digitoimistodude/imenet/master/.eslintrc.js; fi
    # Install JSHint, a JavaScript Code Quality Tool.
    # @link http://jshint.com/docs/
    # - if [[ "$SNIFF" == "1" ]]; then npm install -g jshint; fi
    # Pull in the WP Core jshint rules.
    # - if [[ "$SNIFF" == "1" ]]; then wget https://develop.svn.wordpress.org/trunk/.jshintrc; fi
    # Install eslint.
    # @link https://eslint.org/
    - if [[ "$SNIFF" == "1" ]]; then npm i -g eslint; fi

    # Install stylelint.
    # @link https://stylelint.io/
    - if [[ "$SNIFF" == "1" ]]; then npm i -g stylelint; fi
    # Pull in the imenet stylelint rules.
    - if [[ "$SNIFF" == "1" ]]; then wget https://raw.githubusercontent.com/digitoimistodude/imenet/master/.stylelintrc; fi

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors.
    - find -L . -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l
    # Run the theme through JSHint.
    # - if [[ "$SNIFF" == "1" ]]; then jshint .; fi
    # Run the theme through JavaScript Code Style checker.
    # - if [[ "$SNIFF" == "1" ]]; then jscs .; fi
    # Run the theme through Eslint.
    - if [[ "$SNIFF" == "1" ]]; then npm i --save-dev eslint babel-eslint babel-loader babel-preset-airbnb eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks; fi
    - if [[ "$SNIFF" == "1" ]]; then npm i --save airbnb-browser-shims; fi
    - if [[ "$SNIFF" == "1" ]]; then npm link eslint; fi
    - if [[ "$SNIFF" == "1" ]]; then eslint .; fi
    # Run against WordPress Coding Standards.
    # If you use a custom ruleset, change `--standard=WordPress` to point to your ruleset file,
    # for example: `--standard=wpcs.xml`.
    # You can use any of the normal PHPCS command line arguments in the command:
    # https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs -p . --ignore=node_modules,*/css/* --standard=phpcs.xml; fi
    # Run the theme through stylelint.
    - if [[ "$SNIFF" == "1" ]]; then npm i --save-dev postcss stylelint stylelint-config-recommended stylelint-config-standard stylelint-config-wordpress stylelint-declaration-use-variable stylelint-order stylelint-scss stylelint-value-no-unknown-custom-properties; fi
    - if [[ "$SNIFF" == "1" ]]; then npm link postcss; fi
    - if [[ "$SNIFF" == "1" ]]; then npm link stylelint; fi
    - if [[ "$SNIFF" == "1" ]]; then stylelint .; fi

# Receive notifications for build results.
# @link https://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false
